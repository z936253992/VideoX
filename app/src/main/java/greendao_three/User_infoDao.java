package greendao_three;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class User_infoDao extends AbstractDao<User_info, Void> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity User_info.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, int.class, "User_id", false, "User_id");
        public final static Property User_name = new Property(1, String.class, "User_name", false, "User_name");
        public final static Property User_paswd = new Property(2, String.class, "User_paswd", false, "User_paswd");
        public final static Property User_ranname = new Property(3, String.class, "User_ranname", false, "User_ranname");
        public final static Property User_ident = new Property(4, String.class, "User_ident", false, "User_ident");
        public final static Property User_age = new Property(5, int.class, "User_age", false, "User_age");
        public final static Property User_sex = new Property(6, String.class, "User_sex", false, "User_sex");
        public final static Property User_major = new Property(7, String.class, "User_major", false, "User_major");
        public final static Property User_ap = new Property(8, int.class, "User_ap", false, "User_ap");
        public final static Property User_leve = new Property(9, int.class, "User_leve", false, "User_leve");
        public final static Property User_gradit = new Property(10, int.class, "User_gradit", false, "User_gradit");
        public final static Property User_reward = new Property(11, int.class, "User_reward", false, "User_reward");
        public final static Property User_telephone = new Property(12, int.class, "User_telephone", false, "User_telephone");
        public final static Property User_image = new Property(13, String.class, "User_image", false, "User_image");
    }


    public User_infoDao(DaoConfig config) {
        super(config);
    }
    
    public User_infoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"User_id\" INTEGER NOT NULL ," + // 0: User_id
                "\"User_name\" TEXT," + // 1: User_name
                "\"User_paswd\" TEXT," + // 2: User_paswd
                "\"User_ranname\" TEXT," + // 3: User_ranname
                "\"User_ident\" TEXT," + // 4: User_ident
                "\"User_age\" INTEGER NOT NULL ," + // 5: User_age
                "\"User_sex\" TEXT," + // 6: User_sex
                "\"User_major\" TEXT," + // 7: User_major
                "\"User_ap\" INTEGER NOT NULL ," + // 8: User_ap
                "\"User_leve\" INTEGER NOT NULL ," + // 9: User_leve
                "\"User_gradit\" INTEGER NOT NULL ," + // 10: User_gradit
                "\"User_reward\" INTEGER NOT NULL ," + // 11: User_reward
                "\"User_telephone\" INTEGER NOT NULL ," + // 12: User_telephone
                "\"User_image\" TEXT);"); // 13: User_image
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User_info entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUser_id());
 
        String User_name = entity.getUser_name();
        if (User_name != null) {
            stmt.bindString(2, User_name);
        }
 
        String User_paswd = entity.getUser_paswd();
        if (User_paswd != null) {
            stmt.bindString(3, User_paswd);
        }
 
        String User_ranname = entity.getUser_ranname();
        if (User_ranname != null) {
            stmt.bindString(4, User_ranname);
        }
 
        String User_ident = entity.getUser_ident();
        if (User_ident != null) {
            stmt.bindString(5, User_ident);
        }
        stmt.bindLong(6, entity.getUser_age());
 
        String User_sex = entity.getUser_sex();
        if (User_sex != null) {
            stmt.bindString(7, User_sex);
        }
 
        String User_major = entity.getUser_major();
        if (User_major != null) {
            stmt.bindString(8, User_major);
        }
        stmt.bindLong(9, entity.getUser_ap());
        stmt.bindLong(10, entity.getUser_leve());
        stmt.bindLong(11, entity.getUser_gradit());
        stmt.bindLong(12, entity.getUser_reward());
        stmt.bindLong(13, entity.getUser_telephone());
 
        String User_image = entity.getUser_image();
        if (User_image != null) {
            stmt.bindString(14, User_image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User_info entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUser_id());
 
        String User_name = entity.getUser_name();
        if (User_name != null) {
            stmt.bindString(2, User_name);
        }
 
        String User_paswd = entity.getUser_paswd();
        if (User_paswd != null) {
            stmt.bindString(3, User_paswd);
        }
 
        String User_ranname = entity.getUser_ranname();
        if (User_ranname != null) {
            stmt.bindString(4, User_ranname);
        }
 
        String User_ident = entity.getUser_ident();
        if (User_ident != null) {
            stmt.bindString(5, User_ident);
        }
        stmt.bindLong(6, entity.getUser_age());
 
        String User_sex = entity.getUser_sex();
        if (User_sex != null) {
            stmt.bindString(7, User_sex);
        }
 
        String User_major = entity.getUser_major();
        if (User_major != null) {
            stmt.bindString(8, User_major);
        }
        stmt.bindLong(9, entity.getUser_ap());
        stmt.bindLong(10, entity.getUser_leve());
        stmt.bindLong(11, entity.getUser_gradit());
        stmt.bindLong(12, entity.getUser_reward());
        stmt.bindLong(13, entity.getUser_telephone());
 
        String User_image = entity.getUser_image();
        if (User_image != null) {
            stmt.bindString(14, User_image);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public User_info readEntity(Cursor cursor, int offset) {
        User_info entity = new User_info( //
            cursor.getInt(offset + 0), // User_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // User_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // User_paswd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // User_ranname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // User_ident
            cursor.getInt(offset + 5), // User_age
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // User_sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // User_major
            cursor.getInt(offset + 8), // User_ap
            cursor.getInt(offset + 9), // User_leve
            cursor.getInt(offset + 10), // User_gradit
            cursor.getInt(offset + 11), // User_reward
            cursor.getInt(offset + 12), // User_telephone
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // User_image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User_info entity, int offset) {
        entity.setUser_id(cursor.getInt(offset + 0));
        entity.setUser_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_paswd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_ranname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_ident(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_age(cursor.getInt(offset + 5));
        entity.setUser_sex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_major(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUser_ap(cursor.getInt(offset + 8));
        entity.setUser_leve(cursor.getInt(offset + 9));
        entity.setUser_gradit(cursor.getInt(offset + 10));
        entity.setUser_reward(cursor.getInt(offset + 11));
        entity.setUser_telephone(cursor.getInt(offset + 12));
        entity.setUser_image(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(User_info entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(User_info entity) {
        return null;
    }

    @Override
    public boolean hasKey(User_info entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
